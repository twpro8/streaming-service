services:
  postgres:
    image: postgres:17.2
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mainnet

  rabbitmq:
    container_name: "rabbitmq"
    image: rabbitmq:3.10.7-management
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - mainnet

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Web API
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - mainnet

  redis:
    image: redis:7.4
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - mainnet
    environment:
      - REDIS_PASSWORD=${REDIS_PASS}
    command: [ "redis-server", "--requirepass", "${REDIS_PASS}" ]

#  users_backend_service:
#    container_name: "users_service"
#    build:
#      context: ./services/users-service
#    ports:
#      - "8000:8000"
#    networks:
#      - mainnet
#    env_file:
#      - ./services/users-service/.env
#
#  content_backend_service:
#    container_name: "content_service"
#    build:
#      context: ./services/content-service
#    ports:
#      - "8001:8001"
#    networks:
#      - mainnet
#    env_file:
#      - ./services/content-service/.env
#
#  files_backend_service:
#    container_name: "files_service"
#    build:
#      context: ./services/files-service
#    ports:
#      - "8002:8002"
#    networks:
#      - mainnet
#    env_file:
#      - ./services/files-service/.env
#    depends_on:
#      - postgres
#
#  stream_origin_backend_service:
#    container_name: "stream_origin_service"
#    build:
#      context: ./services/stream-origin
#    ports:
#      - "8003:8003"
#    networks:
#      - mainnet
#    env_file:
#      - ./services/stream-origin/.env
#
#  files_celery_worker:
#    container_name: "files_celery_worker"
#    build:
#      context: ./services/files-service
#    networks:
#      - mainnet
#    env_file:
#      - ./services/files-service/.env
#    command: "uv run celery --app=src.tasks.celery_app:celery_instance worker -l INFO"

volumes:
  postgres_data:
  rabbitmq_data:
  prometheus_data:
  minio_data:
  redis_data:

networks:
  mainnet:
    external: true
